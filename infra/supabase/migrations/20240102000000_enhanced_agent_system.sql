-- Enhanced database schema for sophisticated AI agent system
-- This migration adds all the tables needed for the advanced features

-- Drive monitoring table for CES agent
CREATE TABLE public.drive_monitor (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    file_id TEXT NOT NULL,
    file_name TEXT NOT NULL,
    mime_type TEXT NOT NULL,
    file_size BIGINT,
    modified_time TIMESTAMP WITH TIME ZONE NOT NULL,
    web_view_link TEXT NOT NULL,
    download_url TEXT,
    processed BOOLEAN DEFAULT FALSE,
    processed_at TIMESTAMP WITH TIME ZONE,
    scraped_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tenant_id, file_id)
);

-- KPI thresholds for Scout alert bot
CREATE TABLE public.kpi_thresholds (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    metric TEXT NOT NULL,
    threshold_type TEXT CHECK (threshold_type IN ('above', 'below', 'equals')),
    threshold_value DECIMAL NOT NULL,
    severity TEXT CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tenant_id, metric)
);

-- KPI alerts generated by Scout bot
CREATE TABLE public.kpi_alerts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    metric TEXT NOT NULL,
    current_value DECIMAL NOT NULL,
    threshold_value DECIMAL NOT NULL,
    threshold_type TEXT NOT NULL,
    severity TEXT NOT NULL,
    message TEXT NOT NULL,
    triggered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    acknowledged BOOLEAN DEFAULT FALSE,
    acknowledged_at TIMESTAMP WITH TIME ZONE,
    acknowledged_by TEXT,
    resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    resolved_by TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cloud recommendations from Azurance
CREATE TABLE public.cloud_recommendations (
    id TEXT NOT NULL,
    cloud_provider TEXT CHECK (cloud_provider IN ('azure', 'aws', 'gcp')),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    category TEXT CHECK (category IN ('cost', 'performance', 'security', 'reliability', 'operational_excellence')),
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    impact TEXT CHECK (impact IN ('high', 'medium', 'low')),
    potential_savings DECIMAL,
    currency TEXT DEFAULT 'USD',
    resource_type TEXT NOT NULL,
    resource_id TEXT NOT NULL,
    recommendation_type TEXT NOT NULL,
    status TEXT CHECK (status IN ('active', 'dismissed', 'applied')) DEFAULT 'active',
    dismissed_at TIMESTAMP WITH TIME ZONE,
    dismiss_reason TEXT,
    applied_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    PRIMARY KEY (id, cloud_provider, tenant_id)
);

-- Azurance audit log
CREATE TABLE public.azurance_audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    action TEXT NOT NULL,
    metadata JSONB DEFAULT '{}',
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Agent memory for persistent AI agents
CREATE TABLE public.agent_memory (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    agent_id TEXT NOT NULL,
    session_id TEXT NOT NULL,
    memory_type TEXT CHECK (memory_type IN ('conversation', 'context', 'knowledge', 'preference', 'state')),
    content JSONB NOT NULL DEFAULT '{}',
    metadata JSONB NOT NULL DEFAULT '{
        "importance": 5,
        "access_count": 0,
        "last_accessed": null,
        "expires_at": null,
        "tags": []
    }',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Agent messages for conversation tracking
CREATE TABLE public.agent_message (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    session_id TEXT NOT NULL,
    agent_id TEXT NOT NULL,
    role TEXT CHECK (role IN ('user', 'assistant', 'system', 'function')),
    content TEXT NOT NULL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cross-agent communication
CREATE TABLE public.cross_agent_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    from_agent TEXT NOT NULL,
    to_agent TEXT NOT NULL,
    message_type TEXT CHECK (message_type IN ('request', 'response', 'notification', 'data_share')),
    payload JSONB NOT NULL DEFAULT '{}',
    status TEXT CHECK (status IN ('pending', 'delivered', 'processed', 'failed')) DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    processed_at TIMESTAMP WITH TIME ZONE
);

-- Archived messages for long-term storage
CREATE TABLE public.agent_message_archive (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    original_id UUID NOT NULL,
    session_id TEXT NOT NULL,
    agent_id TEXT NOT NULL,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB DEFAULT '{}',
    original_created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    archived_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- CES Campaign data (for the campaign insights)
CREATE TABLE public.campaign_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    campaign_id TEXT NOT NULL,
    event_type TEXT NOT NULL, -- impression, click, conversion, etc.
    platform TEXT NOT NULL, -- facebook, tiktok, google, etc.
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    cost DECIMAL,
    value DECIMAL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Scout retail transactions
CREATE TABLE public.transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    store_id TEXT NOT NULL,
    transaction_date TIMESTAMP WITH TIME ZONE NOT NULL,
    total_amount DECIMAL NOT NULL,
    payment_method TEXT,
    customer_id TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Transaction items for detailed analysis
CREATE TABLE public.transaction_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    transaction_id UUID REFERENCES public.transactions(id) ON DELETE CASCADE,
    product_id TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL NOT NULL,
    total_price DECIMAL NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Products catalog
CREATE TABLE public.products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES public.tenants(id) ON DELETE CASCADE,
    sku TEXT NOT NULL,
    name TEXT NOT NULL,
    brand TEXT,
    category TEXT,
    unit_price DECIMAL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tenant_id, sku)
);

-- Enable RLS on all new tables
ALTER TABLE public.drive_monitor ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kpi_thresholds ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kpi_alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cloud_recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.azurance_audit_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_memory ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_message ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cross_agent_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_message_archive ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.campaign_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transaction_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;

-- RLS policies for tenant isolation
CREATE POLICY "tenant_drive_monitor_access" ON public.drive_monitor
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_kpi_thresholds_access" ON public.kpi_thresholds
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_kpi_alerts_access" ON public.kpi_alerts
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_cloud_recommendations_access" ON public.cloud_recommendations
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_azurance_audit_access" ON public.azurance_audit_log
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_agent_memory_access" ON public.agent_memory
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_agent_message_access" ON public.agent_message
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_cross_agent_messages_access" ON public.cross_agent_messages
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_agent_archive_access" ON public.agent_message_archive
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_campaign_events_access" ON public.campaign_events
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_transactions_access" ON public.transactions
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

CREATE POLICY "tenant_products_access" ON public.products
    FOR ALL USING (tenant_id IN (SELECT id FROM public.tenants WHERE slug = public.get_current_tenant()));

-- Helper function to execute dynamic SQL (for KPI calculations)
CREATE OR REPLACE FUNCTION public.exec_sql(sql_query TEXT, params TEXT[] DEFAULT NULL)
RETURNS TABLE(result JSONB) AS $$
BEGIN
    -- This is a simplified version - in production you'd want more security
    RETURN QUERY EXECUTE sql_query USING params;
EXCEPTION
    WHEN OTHERS THEN
        RETURN QUERY SELECT jsonb_build_object('error', SQLERRM);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to archive old messages
CREATE OR REPLACE FUNCTION public.archive_old_messages(
    cutoff_date TIMESTAMP WITH TIME ZONE,
    tenant_filter UUID
) RETURNS INTEGER AS $$
DECLARE
    archived_count INTEGER;
BEGIN
    -- Move old messages to archive
    WITH moved_messages AS (
        INSERT INTO public.agent_message_archive (
            original_id, tenant_id, session_id, agent_id, role, content, metadata, original_created_at
        )
        SELECT id, tenant_id, session_id, agent_id, role, content, metadata, created_at
        FROM public.agent_message
        WHERE created_at < cutoff_date
        AND tenant_id = tenant_filter
        RETURNING original_id
    ),
    deleted_messages AS (
        DELETE FROM public.agent_message
        WHERE id IN (SELECT original_id FROM moved_messages)
        RETURNING id
    )
    SELECT COUNT(*) INTO archived_count FROM deleted_messages;
    
    RETURN archived_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Indexes for performance
CREATE INDEX idx_drive_monitor_tenant_processed ON public.drive_monitor(tenant_id, processed);
CREATE INDEX idx_kpi_alerts_tenant_triggered ON public.kpi_alerts(tenant_id, triggered_at DESC);
CREATE INDEX idx_cloud_recommendations_tenant_status ON public.cloud_recommendations(tenant_id, status);
CREATE INDEX idx_agent_memory_agent_session ON public.agent_memory(agent_id, session_id);
CREATE INDEX idx_agent_memory_type_importance ON public.agent_memory(memory_type, (metadata->>'importance')::int DESC);
CREATE INDEX idx_agent_message_session_created ON public.agent_message(session_id, created_at);
CREATE INDEX idx_cross_agent_messages_to_status ON public.cross_agent_messages(to_agent, status);
CREATE INDEX idx_campaign_events_tenant_timestamp ON public.campaign_events(tenant_id, timestamp DESC);
CREATE INDEX idx_transactions_tenant_date ON public.transactions(tenant_id, transaction_date DESC);

-- Triggers for updated_at
CREATE OR REPLACE FUNCTION public.update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_kpi_thresholds_updated_at
    BEFORE UPDATE ON public.kpi_thresholds
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at();

CREATE TRIGGER update_cloud_recommendations_updated_at
    BEFORE UPDATE ON public.cloud_recommendations
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at();

CREATE TRIGGER update_agent_memory_updated_at
    BEFORE UPDATE ON public.agent_memory
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at();

-- Sample data for testing
INSERT INTO public.kpi_thresholds (tenant_id, metric, threshold_type, threshold_value, severity) VALUES
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'daily_revenue', 'below', 10000, 'high'),
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'transaction_count', 'below', 100, 'medium'),
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'avg_transaction_value', 'below', 50, 'low');

-- Sample products for Scout tenant
INSERT INTO public.products (tenant_id, sku, name, brand, category, unit_price) VALUES
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'COKE001', 'Coca-Cola 330ml', 'Coca-Cola', 'Beverages', 25.00),
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'CHIPS001', 'Lays Classic 50g', 'Lays', 'Snacks', 35.00),
((SELECT id FROM public.tenants WHERE slug = 'scout'), 'WATER001', 'Absolute Pure Water 500ml', 'Absolute', 'Beverages', 15.00);