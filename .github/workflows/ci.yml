name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PNPM_VERSION: 8.15.0

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      tenants: ${{ steps.changes.outputs.tenants }}
      packages: ${{ steps.changes.outputs.packages }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed tenants
        id: changes
        run: |
          # Get list of all tenants
          ALL_TENANTS=$(ls -1 tenants/ | grep -v _template | jq -R -s -c 'split("\n")[:-1]')
          echo "All tenants: $ALL_TENANTS"
          
          # Detect changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"
          
          # Find tenants with changes
          CHANGED_TENANTS=()
          for tenant in $(ls -1 tenants/ | grep -v _template); do
            if echo "$CHANGED_FILES" | grep -q "^tenants/$tenant/"; then
              CHANGED_TENANTS+=("$tenant")
            fi
          done
          
          # If no tenant-specific changes, test all tenants for safety
          if [ ${#CHANGED_TENANTS[@]} -eq 0 ]; then
            TENANTS_JSON="$ALL_TENANTS"
          else
            TENANTS_JSON=$(printf '%s\n' "${CHANGED_TENANTS[@]}" | jq -R -s -c 'split("\n")[:-1]')
          fi
          
          echo "tenants=$TENANTS_JSON" >> $GITHUB_OUTPUT
          
          # Check for package changes
          if echo "$CHANGED_FILES" | grep -q "^packages/"; then
            echo "packages=true" >> $GITHUB_OUTPUT
          else
            echo "packages=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for infra changes
          if echo "$CHANGED_FILES" | grep -q "^infra/\|^\.github/\|^package\.json\|^pnpm-workspace\.yaml"; then
            echo "infra=true" >> $GITHUB_OUTPUT
          else
            echo "infra=false" >> $GITHUB_OUTPUT
          fi

  test-packages:
    name: Test Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build packages
        run: |
          pnpm --filter "./packages/*" build
      
      - name: Test packages
        run: |
          pnpm --filter "./packages/*" test || echo "No tests configured"
      
      - name: Lint packages
        run: |
          pnpm --filter "./packages/*" lint

  test-tenants:
    name: Test Tenant
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.tenants != '[]'
    strategy:
      fail-fast: false
      matrix:
        tenant: ${{ fromJson(needs.detect-changes.outputs.tenants) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build packages first
        run: pnpm --filter "./packages/*" build
      
      - name: Build tenant
        run: |
          cd tenants/${{ matrix.tenant }}
          pnpm build
      
      - name: Test tenant
        run: |
          cd tenants/${{ matrix.tenant }}
          pnpm test || echo "No tests configured for ${{ matrix.tenant }}"
      
      - name: Lint tenant
        run: |
          cd tenants/${{ matrix.tenant }}
          pnpm lint || echo "No linting configured for ${{ matrix.tenant }}"
      
      - name: Type check tenant
        run: |
          cd tenants/${{ matrix.tenant }}
          pnpm typecheck || echo "No type checking configured for ${{ matrix.tenant }}"

  pulser-scan:
    name: Pulser Duplicate Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.tenants != '[]'
    strategy:
      matrix:
        tenant: ${{ fromJson(needs.detect-changes.outputs.tenants) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Run duplicate scan
        run: |
          node scripts/scan-duplicates.js --tenant=${{ matrix.tenant }} --dry-run
        continue-on-error: true
      
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: duplicate-scan-${{ matrix.tenant }}
          path: reports/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true
      
      - name: Check for secrets
        run: |
          # Simple secret scanning
          if grep -r -E "(password|secret|key|token).*['\"].*['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md"; then
            echo "⚠️ Potential secrets found in code"
            exit 1
          fi

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Run cost analysis
        run: |
          node scripts/collect-costs.js --period=7d --format=json --output=reports/costs.json
        continue-on-error: true
      
      - name: Upload cost report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cost-analysis
          path: reports/costs.json
          retention-days: 30

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test-packages, test-tenants]
    if: github.event_name == 'pull_request' && (needs.test-packages.result == 'success' || needs.test-packages.result == 'skipped') && (needs.test-tenants.result == 'success' || needs.test-tenants.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build all packages
        run: pnpm --filter "./packages/*" build
      
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test-packages, test-tenants, security-scan]
    if: github.ref == 'refs/heads/main' && (needs.test-packages.result == 'success' || needs.test-packages.result == 'skipped') && (needs.test-tenants.result == 'success' || needs.test-tenants.result == 'skipped') && needs.security-scan.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build all packages
        run: pnpm --filter "./packages/*" build
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}